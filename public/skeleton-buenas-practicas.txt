# Cu√°ndo usar Skeletons en Next.js (con Hydration)

## ‚ùå No usar Skeleton antes de la hidrataci√≥n si:

- El contenido ya est√° renderizado en el HTML del servidor.
- Us√°s `getStaticProps` o `getServerSideProps` para generar el contenido.
- Mostrar un skeleton mientras ya hay contenido puede causar un "parpadeo": primero aparece el contenido real, luego desaparece (por el skeleton), y luego vuelve a aparecer.

## ‚úÖ Usar Skeleton solo cuando:

- El contenido depende del cliente y no est√° en el HTML inicial.
- Us√°s datos que vienen con `useEffect`, `useState` o `fetch` del lado del cliente.
- Ejemplo: mostrar datos del usuario autenticado que no se pueden conocer en el servidor.

---

## ‚úÖ Ejemplo pr√°ctico: detectar si est√° hidratado

### 1. Hook para detectar si el componente ya est√° hidratado

```tsx
import { useEffect, useState } from "react";

function useHydration() {
  const [hydrated, setHydrated] = useState(false);

  useEffect(() => {
    setHydrated(true);
  }, []);

  return hydrated;
}
2. Usar en un componente
tsx
Copiar
Editar
export default function MiComponente() {
  const hydrated = useHydration();

  if (!hydrated) {
    return <Skeleton />; // mientras no est√° hidratado
  }

  return <ContenidoReal />; // despu√©s de la hidrataci√≥n
}
‚úÖ Alternativa r√°pida sin hook:
tsx
Copiar
Editar
const isHydrated = typeof window !== 'undefined';

return (
  <>
    {!isHydrated ? <Skeleton /> : <ContenidoReal />}
  </>
);
üß† Resumen
Skeleton solo cuando esper√°s que el contenido no est√© disponible antes de la hidrataci√≥n.

Evit√° parpadeos innecesarios que confundan al usuario.

Hidrataci√≥n = React conectando el HTML ya renderizado con el JavaScript del cliente.